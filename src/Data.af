.needs <std>
import File, FileManager from "files";
import { createFile } from "files" under fs;
import string from "String";
import HTTPResponse from "HTTP";
import Result from "Utils/Result";
import {accept, reject} from "Utils/Result" under res;
import List from "Collections";
import Error from "Utils/Error";
import Function from "Utils/Functions";
import Defer from "Utils/Defer";

any write(adr data, File file){
    return file.write(data);
};

export Result save(List tasks){
    File saveFile = fs.createFile("./data/todo.json").expect("Failed to create save file");
    let __fileDefer = new Defer(Function([File f] => f.close(), saveFile));

    write("{\"tasks\": [", saveFile);

    tasks.forEach(
      [string task, int i, File f] => {
        if i != 0 write(",", f);
        write(task.cstr(), f);
      }, saveFile
    );

    write("]}", saveFile);

    return res.accept(new HTTPResponse("Update Saved", "200", "OK"));
};
