.needs <std>
import Middleware from "HTTP/Middleware";
import HTTPResponse, HTTPMessage, NotFoundError, NotImplementedError, HTTPMethod from "HTTP";
import {methodToString} from "HTTP" under http;
import Server from "HTTP/Server";
import GET, POST, PUT, DELETE from "HTTP/Endpoints";
import Endpoints from "HTTP/Endpoint";
import Content from "Web/Content";
import string from "String";
import Result from "Utils/Result";
import {accept, reject} from "Utils/Result" under res;
import GetTask from "./src/Content/GetTask";
import PostTask from "./src/Content/PostTask"; 
import DeleteTask from "./src/Content/DeleteTask";
import Index from "./src/Content/UI/Index";
import PlainContent from "./src/Content/UI/PlainContent";
import Map from "Utils/Map";
import Error from "Utils/Error";
import { info } from "./src/flat_log" under log;

fn errorResponse(string message, ?adr code) {
    adr code = code.or(400);
    let response = new HTTPResponse(message.cstr(), code, "Bad Request");
    response.addHeader("Content-Type", "application/json");
    res.accept(response)
};

class TodoList signs Server {
    Index indexMarkup = new Index();
    PlainContent indexJS = new PlainContent("./js/index.js");
    GetTask getTask = new GetTask();
    PostTask postTask = new PostTask();
    DeleteTask deleteTask = new DeleteTask();

    fn logRequest() -> Map : Middleware {
        return {
            "after": fn (Server __s, HTTPMessage req, HTTPResponse r) {
                log.info(`[{http.methodToString(req.method)}] {req.endpoint}\n`);
                log.info(`\t{r.getStatusCode()} {r.getStatusMessage()}\n`);
                r
            }
        };
    }

    fn home() -> Result : GET("/") {
        let responce = new HTTPResponse(my.indexMarkup.render(), "200", "OK");
        responce.addHeader("Content-Type", "text/html");
        res.accept(responce)
    };

    fn indexJavaScript() -> Result : GET("/js/index.js") {
        let responce = new HTTPResponse(my.indexJS.render(), "200", "OK");
        responce.addHeader("Content-Type", "text/javascript");
        res.accept(responce)
    };

    fn tasks() -> Map : Endpoints("/api/tasks/:*") {
        return {
            "GET": fn (TodoList self, HTTPMessage __message, ? any id) {
                id.match({
                    "some": fn (any val, TodoList this) this.getTask.render(val), 
                    "none": fn () self.getTask.render(NULL)
                }, self)
            },
            "DELETE": fn (TodoList self, HTTPMessage __message, ? string id) {
                id.match({
                    "some": fn (string taskID, TodoList this) this.deleteTask.render(taskID),
                    "none": fn () errorResponse("ID not passed")
                }, self)
            },
            "POST": fn (TodoList self, HTTPMessage message) {
                log.info("POST request to /api/tasks");
                self.postTask.render(message.body)
            },
        };
    };

    fn init() -> Self {
        return my;
    };
};

fn main() {
    let server = new TodoList();
    server.listen();
    return 0;
};
