.needs <std>
import HTTPResponce, HTTPMessage from "HTTP";
import Server from "HTTP/Server";
import GET, POST, PUT, DELETE from "HTTP/Endpoints";
import Content from "Web/Content";
import string from "String";
import List from "Collections";
import {getList, getInt, getString} from "JSON/Parse" under json;
import JSONObject, JSONValue from "JSON";
import File from "files";
import {createFile} from "files" under fs;
import Result from "Utils/Result";
import {accept, reject} from "Utils/Result" under res;
import Random from "math";

class GetTask signs Content {
	Result render(adr id) {
		my.loadFile("./data/todo.json");
		my.content = my.cleanContent;

		if id == NULL {
			let responce = new HTTPResponce(my.content.cstr(), "200", "OK");
			responce.addHeader("Content-Type", "application/json");
			return res.accept(responce);
		};

		// find the task with id;
		string id = id;
		int id = id.toInt().value(
			[] => return -1
		);

		if (id < 0) | (id >= my.content.len()) {
			let responce = new HTTPResponce("Task not found", "404", "Not Found");
			responce.addHeader("Content-Type", "text/plain");
			return res.accept(responce);
		};
		
		List content = json.getList("tasks", my.content);

		if content == NULL 
			res.reject("tasks returned NULL Content List");


		if content.getCount() == 0 {
			let responce = new HTTPResponce("Task not found", "404", "Not Found");
			responce.addHeader("Content-Type", "text/plain");
			return res.accept(responce);
		};

		bool found = false;
		for int i = 0; i < content.getCount(); i++ {
			my.content = content.get(i);
			int taskID = json.getInt("id", my.content);
			if taskID == id {
				let responce = new HTTPResponce(my.content.cstr(), "200", "OK");
				responce.addHeader("Content-Type", "application/json");
				return res.accept(responce);
			};
		};

		if !found {
			let responce = new HTTPResponce("Task not found", "404", "Not Found");
			responce.addHeader("Content-Type", "text/plain");
			return res.accept(responce);
		};
	};
};

class PostTask signs Content {
	Result render(string body) {
		my.loadFile("./data/todo.json");
		my.content = my.cleanContent;
		List tasks = json.getList("tasks", my.content);
		string name = json.getString("name", body);
		int id = Random().nextInt(10000);
		JSONObject obj = new JSONObject();
		obj.addInt("id", id);
		obj.addString("name", name);
		tasks.pushBack(obj.toString());
		let saveFile = fs.createFile("./data/todo.json");

		if saveFile == NULL {
			return res.reject("Failed to create file");
		};
		saveFile.write("{\"tasks\":[");

		for int i = 0; i < tasks.getCount(); i++ {
			string s = tasks.get(i);
			saveFile.write(s.cstr());
			if i != tasks.getCount() - 1 {
				saveFile.write(",");
			};
		};
		
		saveFile.write("], \"count\":");
		saveFile.write(`{tasks.getCount()}`.cstr());
		saveFile.write("}");
		saveFile.close();
		return res.accept(new HTTPResponce(obj.toString().cstr(), "200", "OK"));
	};
};

class DeleteTask signs Content {
	Result render(string id) {
		int numericId = id.toInt().value(
			[] => return -1
		);

		if numericId < 0 {
			return res.reject(`Invalid id {id}`);
		};

		my.loadFile("./data/todo.json");
		my.content = my.cleanContent;
		List tasks = json.getList("tasks", my.content);

		if tasks == NULL {
			return res.reject("tasks returned NULL Content List");
		};

		if tasks.getCount() == 0 {
			return res.reject("No tasks found");
		};
		
		for int i = 0; i < tasks.getCount(); i++ {
			my.content = tasks.get(i);
			int taskID = json.getInt("id", my.content);
			if taskID == numericId {
				tasks.drop(i);
				break;
			};
		};

		let saveFile = fs.createFile("./data/todo.json");
		
		if saveFile == NULL {
			return res.reject("Failed to create file");
		};

		saveFile.write("{\"tasks\":[");
		for int i = 0; i < tasks.getCount(); i++ {
			string s = tasks.get(i);
			saveFile.write(s.cstr());
			if i != tasks.getCount() - 1 {
				saveFile.write(",");
			};
		};

		saveFile.write("]}");
		saveFile.close();
		return res.accept(new HTTPResponce("Task deleted", "200", "OK"));
	};
};

class Index signs Content {
	Result render() {
		my.loadFile("./html/index.html");
		my.content = my.cleanContent;
		let responce = new HTTPResponce(my.content.cstr(), "200", "OK");
		responce.addHeader("Content-Type", "text/html");
		return res.accept(responce);
	};
};

class IndexJS signs Content {
	Result render() {
		my.loadFile("./js/index.js");
		my.content = my.cleanContent;
		let responce = new HTTPResponce(my.content.cstr(), "200", "OK");
		responce.addHeader("Content-Type", "text/javascript");
		return res.accept(responce);
	};
};

class TodoList signs Server {
	Index indexMarkup = new Index();
	IndexJS indexJS = new IndexJS();
	GetTask getTask = new GetTask();
	PostTask postTask = new PostTask();
	DeleteTask deleteTask = new DeleteTask();

	Result home() : GET("/") {
		return my.indexMarkup.render();
	};

	Result indexJavaScript() : GET("/js/index.js") {
		return my.indexJS.render();
	};

	Result getTasks(HTTPMessage message) : GET("/api/tasks") {
		adr taskID = message.query.get("id");
		return my.getTask.render(taskID);
	};

	Result postTasks(HTTPMessage message) : POST("/api/tasks") {
		return my.postTask.render(message.body);
	};

	Result deleteTasks(HTTPMessage message) : DELETE("/api/tasks") {
		adr taskID = message.query.get("id");
		return my.deleteTask.render(taskID);
	};

	TodoList init() {
		return my;
	};
};

int main(){
	let server = new TodoList();
	server.listen();
	return 0;
};
