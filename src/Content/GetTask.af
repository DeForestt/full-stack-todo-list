.needs <std>

import Content from "Web/Content";
import Result from "Utils/Result";
import { accept, reject } from "Utils/Result" under res;
import HTTPResponce, NotFoundError from "HTTP";
import {getInt, getList} from "JSON/Parse" under json;
import Error from "Utils/Error";
import string from "String";
import List from "Collections";
import Map from "Utils/Map";
import { info, warning } from "./src/flat_log" under log;

class GetTask signs Content {
  GetTask init() {
    return my;
  };

  
	Result render(? any id) {
		my.loadFile("./data/todo.json");
		my.content = my.cleanContent;

		if id.isSome() == false {
			let responce = new HTTPResponce(my.content.cstr(), "200", "OK");
			responce.addHeader("Content-Type", "application/json");
			return res.accept(responce);
		};

		string id = id.or(`1`);
		
		// find the task with id;
		int id = id.toInt().value(
			[] => return -1
		);

		

		if (id < 0) {
			log.warning(`Invalid id: {id}`);
			return res.reject(new NotFoundError(`Id {id} mot found`));
		};

		List tasks = json.getList("tasks", my.content);


		if tasks == NULL {
			return res.reject(new Error("tasks returned NULL Content List"));
		};

		if tasks.getCount() == 0 {
			return res.reject(new NotFoundError("No tasks found"));
		};
		
		for int i = 0; i < tasks.getCount(); i++ {
			my.content = tasks.get(i).expect("Failed to get value");
			int taskID = json.getInt("id", my.content);
			if taskID == id {
				let resp = new HTTPResponce(my.content.cstr(), "201", "Found");
				resp.addHeader("ContentType", "Application/JSON");
				return res.accept(resp);
			};
		};

		log.warning(`Task {id} not found`);
		return res.reject(new NotFoundError("Task not found"));
	};
};
