.needs <std>

import Result from "Utils/Result";
import Error from "Utils/Error";
import {accept, reject} from "Utils/Result" under res;
import List from "Collections";
import Content from "Web/Content";
import string from "String";
import HTTPResponse, NotFoundError, BadRequestError from "HTTP";
import {save} from "./src/Data" under data;
import {getList, getInt} from "JSON/Parse" under json;

class DeleteTask signs Content {
	fn render(string id) -> Result {
		// we need to trim the $ from the id because of a bug
		// in the router that sometimes appends a $ to query strings
		int numericId = id.trim('$').toInt().match({
			"ok": [int value] => value,
			"_": [] => return -1,
		});

		if numericId < 0 {
			return res.reject(new BadRequestError("Invalid ID"));
		};

		my.loadFile("./data/todo.json");
		my.content = my.cleanContent;
		List tasks = json.getList("tasks", my.content);

		if tasks == NULL {
			return res.reject(new Error("tasks returned NULL Content List"));
		};

		if tasks.getCount() == 0 {
			return res.reject(new NotFoundError("No tasks found"));
		};
		
		for int i = 0; i < tasks.getCount(); i++ {
			my.content = tasks.get(i).expect("Failed to get value");
			int taskID = json.getInt("id", my.content);
			if taskID == numericId {
				tasks.drop(i);
				return data.save(tasks);
			};
		};

		return res.reject(new NotFoundError("Task not found"));
	};
};
